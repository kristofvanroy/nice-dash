<?php

/**
 * @file
 * Nice dash module.
 */

/**
 * Implementation of hook_perm().
 */
function nice_dash_perm() {
  return array('administer nice dashboard', 'view nice dashboard');
}

/**
 * Implementation of hook_menu().
 */
function nice_dash_menu() {
  module_load_include('inc', 'nice_dash', 'nice_dash.registry');
  return _nice_dash_menu();
}

/**
 * Implementation of hook_menu().
 */
function nice_dash_menu_alter(&$items) {
  module_load_include('inc', 'nice_dash', 'nice_dash.registry');
  _nice_dash_menu_alter($items);
}

/**
 * Implementation of hook_theme().
 */
function nice_dash_theme() {
  module_load_include('inc', 'nice_dash', 'nice_dash.registry');
  return _nice_dash_theme();
}

/**
 * Implementation of hook_nice_dash_plugins().
 */
function nice_dash_nice_dash_plugins() {
  module_load_include('inc', 'nice_dash', 'nice_dash.registry');
  return _nice_dash_nice_dash_plugins();
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function nice_dash_ctools_plugin_api($owner, $api) {
  if ($owner == 'nice_dash' && ($api == 'nice_dash' || $api == 'plugins')) {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 */
function nice_dash_ctools_plugin_plugins() {
  return array(
    'cache' => TRUE,
    'use hooks' => TRUE,
  );
}

/**
 * Implementation of hook_flush_caches().
 */
function nice_dash_flush_caches() {
  // Delete objects & plugins cache.
  cache_clear_all('nice_dash_objects', 'cache');
  cache_clear_all('plugins:nice_dash:plugins', 'cache');
  return array();
}

/**
 * Implementation of hook_init().
 */
function nice_dash_init() {
  if (isset($_SESSION['admin_dashboard_redirect'])) {
    unset($_SESSION['admin_dashboard_redirect']);
    drupal_goto('admin/dashboard');
  }
}

/**
 * Implementation of hook_user().
 */
function nice_dash_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'login') {
    if (user_access('view nice dashboard') && variable_get('nice_dash_redirect_after_login', FALSE)) {
      $_SESSION['admin_dashboard_redirect'] = TRUE;
    }
  }
}

/**
 * Implementation of hook_views_default_views().
 */
function nice_dash_views_default_views() {
  $views = array();

  foreach (nice_dash_get_plugin() as $plugin) {
    $plugin_name = $plugin['name'];
    $object = nice_dash_get_plugin($plugin_name);
    if (method_exists($object, 'views_api')) {
      $plugin_path = $plugin['handler']['path'];
      require_once($plugin_path .'/'. $plugin_name .'.views.inc');
      $function = $plugin_name .'_views';
      if (function_exists($function)) {
        $plugin_views = $function();
        $views = array_merge($plugin_views, $views);
      }
    }
  }

  return $views;
}

/**
 * Implementation of hook_block().
 */
function nice_dash_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array('dashboard' => array(
      'info' => t('Dashboard'),
      'admin' => TRUE,
      'cache' => BLOCK_CACHE_PER_ROLE,
      'weight' => -1,
      ),
    );
  }
  elseif ($op == 'view') {
    $block['subject'] = t('Dashboard');
    $block['content'] = nice_dash_dashboard_block();
    return $block;
  }
}

/**
 * Show a block with all dashboards.
 */
function nice_dash_dashboard_block() {

  $dashboards = nice_dash_get_object();

  if (count($dashboards) > 0) {
    foreach ($dashboards as $dashboard) {
      $links['dash-'. $dashboard->did]['href'] = 'admin/dashboard/view/'. $dashboard->did;
      $links['dash-'. $dashboard->did]['title'] = $dashboard->name;
    }
  }

  if (user_access('administer nice dashboard')) {
    $links['create']['href'] = 'admin/dashboard/configure/create-dashboard';
    $links['create']['title'] = t('Create new dashboard');

    $links['configure']['href'] = 'admin/dashboard/configure';
    $links['configure']['title'] = t('Configure dashboards');
  }

  return theme('links', $links, array('class' => 'menu drilldown-active-menu'));
}

/**
 * Get all visible plugins or a plugin handler.
 *
 * @param string $plugin_name
 *   The name of the plugin.
 * @return mixed
 *   Either a list of plugins or a loaded plugin class.
 */
function nice_dash_get_plugin($plugin_name = NULL) {
  static $cache = array();
  static $cached_plugins = array();

  if (empty($cached_plugins)) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('nice_dash', 'plugins');
    $plugin_visibilty = unserialize(variable_get('nice_dash_visibility', ''));
    foreach ($plugins as $key => $value) {
      if ($plugin_visibilty[$key] == '0') {
        unset($plugins[$key]);
      }
    }
    $cached_plugins = $plugins;
  }
  if ($plugin_name == NULL) {
    return $cached_plugins;
  }
  else {
    if (!isset($cache[$plugin_name])) {
      if ($class = ctools_plugin_get_class($cached_plugins[$plugin_name], 'handler')) {
        $cache[$plugin_name] = new $class($cached_plugins[$plugin_name]);
      }
    }
    return isset($cache[$plugin_name]) ? $cache[$plugin_name] : FALSE;
  }
}

/**
 * Get all plugins or a plugin handler.
 */
function nice_dash_get_all_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('nice_dash', 'plugins');
  $plugin_visibilty = unserialize(variable_get('nice_dash_visibility', ''));
  foreach ($plugins as $key => $value) {
    $plugin_visibilty[$key] == '0' ? $plugins[$key]['visible'] = 0 : $plugins[$key]['visible'] = 1;
  }
  return $plugins;
}

/**
 * Fetch nice dashboard data.
 *
 * @param string $type
 *   Either return widgets or dashboard.
 * @param mixed $id
 *   Either an id from a dashboard or wid from widget.
 *   (and later on a machine name).
 */
function nice_dash_get_object($type = 'dashboard', $id = NULL) {

  static $run = FALSE;
  static $objects = array();

  if (!$run) {

    if ($objects_cache = cache_get('nice_dash_objects')) {
      $objects = $objects_cache->data;
    }
    else {
      module_load_include('inc', 'nice_dash', 'nice_dash.registry');
      $objects['widget'] = _nice_dash_get_all_widgets();
      $objects['widget_custom'] = _nice_dash_get_custom_widgets();
      $objects['dashboard'] = _nice_dash_get_dashboards();
      // Let other modules alter nice dash boards.
      drupal_alter('nice_dashboard_objects', $objects);
      cache_set('nice_dash_objects', $objects);
    }

    $run = TRUE;
  }

  if (!empty($id)) {
    return (isset($objects[$type][$id])) ? $objects[$type][$id] : FALSE;
  }
  else {
    return isset($objects[$type]) ? $objects[$type] : array();
  }
}

/**
 * check if user has access to the dashboard
 */
function nice_dash_dashboard_access($dashboard, $default_menu = FALSE) {

  global $user;

  if ($user->uid == 1 || (empty($dashboard->access) && user_access('view nice dashboard'))) {
    if (isset($default_menu)) {
      _nice_dash_set_default_menu_task($dashboard->did);
    }
    return TRUE;
  }
  foreach (unserialize($dashboard->access) as $key => $value) {
    if ($value != 0 && array_key_exists($key, $user->roles)) {
      if (isset($default_menu)) {
        _nice_dash_set_default_menu_task($dashboard->did);
      }
      return TRUE;
    }
  }
}

/**
 * helper function to check the access from the hook_menu
 */
function _nice_dash_dashboard_access() {
  $result = nice_dash_get_object();
  foreach ($result as $key => $dashboard) {
    if (nice_dash_dashboard_access($dashboard, TRUE) == TRUE) {
      return TRUE;
    }
  }
}

/**
 * set the dashboard did for the default local menu task
 */
function _nice_dash_set_default_menu_task($dashboard = NULL) {
  static $did;
  if (!isset($did) && isset($dashboard)) {
    $did = $dashboard;
  }
  return $did;
}

/**
 * helper function to redirect the default localtask to the correct dashboard
 */
function _nice_dash_dashboard_page() {
  _nice_dash_dashboard_access();
  $did = _nice_dash_set_default_menu_task();
  $url = !empty($did) ? 'admin/dashboard/view/' . $did : 'admin/dashboard/configure/create-dashboard';
  return drupal_goto($url);
}

/**
 * Nice dash menu callback.
 *
 * @param array $settings
 *   A collection of page arguments from the menu callback.
 * @return string $output
 *   The rendered page - can be form or anything else.
 */
function nice_dash_menu_callback($settings) {
  $plugin_name = $settings['plugin'];
  $callback_method = (isset($settings['callback_method'])) ? $settings['callback_method']: 'menu_callback';
  $return_method = (isset($settings['return_method'])) ? $settings['return_method'] : 'drupal_get_form';

  $object = nice_dash_get_plugin($plugin_name);
  if ($object->nice_dash_enabled($plugin_name)) {
    $output = $object->$callback_method();
    if (!empty($output)) {
      if ($return_method == 'drupal_get_form') {
        return drupal_get_form('nice_dash_menu_callback_form', $output, $plugin_name, $callback_method);
      }
      elseif (!empty($return_method) && function_exists($return_method)) {
        return $return_method($output);
      }
      else {
        return $output;
      }
    }
  }

  return t('No page found or you do not have sufficient permission to access the page.');
}

/**
 * Helper function to return the form passed by nice_dash_menu_callback or from a plugin.
 *
 * @param string $plugin_name
 *   Name of the plugin.
 * @param string $callback_method
 *   Name of the method to call.
 * @return string $form
 *   The rendered form.
 */
function nice_dash_menu_callback_form($form_state, $form, $plugin_name, $callback_method) {
  $form['#plugin_name'] = $plugin_name;
  $form['#callback_method'] = $callback_method;
  return $form;
}

/**
 * Nice dash menu callback validate.
 */
function nice_dash_menu_callback_form_validate($form, &$form_state) {
  $object = nice_dash_get_plugin($form['#plugin_name']);
  $callback_validate_function = $form['#callback_method'] .'_validate';
  if (method_exists($object, $callback_validate_function)) {
    $object->$callback_validate_function($form, $form_state);
  }
}

/**
 * Nice dash menu callback form submit.
 */
function nice_dash_menu_callback_form_submit($form, &$form_state) {
  $object = nice_dash_get_plugin($form['#plugin_name']);
  $callback_submit_function = $form['#callback_method'] .'_submit';
  $object->$callback_submit_function($form, $form_state);
}
